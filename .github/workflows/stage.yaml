name: Build and Deploy inventory-func

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APP_NAME: order-data
  NAMESPACE: samp
  CLUSTER_NAME: test-ingress-dev
  CLUSTER_PROJECT: zs-devops
  GAR_PROJECT: zs-devops
  GAR_REGISTRY: order-data
  artifact_directory: inventory-func

jobs:
  build:
    name: ðŸ§ª Unit Tests and ðŸ”¨ Build
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.1
        ports:
          - "5432:5432"
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: health-check
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')

    steps:
      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21
          id: Go

      - name: Checkout code into go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          git config --global url."https://x-oauth-basic@github.com/".insteadOf "https://github.com/"
          git config --global http.sslVerify false
          go mod download

      - name: Test
        run: |
          mkdir -p $artifact_directory/build
          go test ./... -count=1 -v -coverprofile $artifact_directory/cover.out -coverpkg=./...
          cat $artifact_directory/cover.out | grep -v "mock_interface" | grep -v "migrations" > $artifact_directory/coverage.out

      - name: Test Coverage report
        run: |
          go tool cover -func=$artifact_directory/coverage.out | tee $artifact_directory/c.out

      - name: Generate and Commit Coverage Badge
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main'}}
        run: |
          go install github.com/AlexBeauchemin/gobadge@latest
          gobadge -filename=$artifact_directory/c.out -target=$(pwd)/README.md
          git config --local user.email "action@github.com" && git config --local user.name "GitHub-Action"
          git diff --quiet --exit-code README.md || git commit README.md -m "updating coverage in README.md" 

      - name: Push Coverage Badge
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main'}}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          branch: ${{github.ref}}

      - name: Coverage Quality Gate
        env:
          TESTCOVERAGE_THRESHOLD: 10
        run: |
          echo "Quality Gate: checking test coverage is above threshold ..."
          echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
          totalCoverage=`go tool cover -func=$artifact_directory/coverage.out | grep 'total:' | grep -Eo '[0-9]+\.[0-9]+'`
          echo "Current test coverage : $totalCoverage %"
          if (( $(echo "$totalCoverage $TESTCOVERAGE_THRESHOLD" | awk '{print ($1 >= $2)}') )); then
              echo "OK"
          else
              echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
              echo "Failed"
              exit 1
          fi

      - name: Make Directory
        run: mkdir build

      - name: Build
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o main

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: main

#  code_quality:
#    name: ðŸŽ– Code Quality
#    runs-on: ubuntu-latest
#
#    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
#
#    steps:
#      - name: Check out code into the Go module directory
#        uses: actions/checkout@v3
#
#      - name: Set up Go 1.19
#        uses: actions/setup-go@v2
#        with:
#          go-version: 1.19
#        id: go
#
#      - name: Setup Git
#        run: |
#          git config --global url."https://${{ secrets.DEV_PAT }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
#          git config --global http.sslVerify false
#
#      - name: golangci-lint
#        uses: golangci/golangci-lint-action@v3
#        with:
#          version: v1.52.2
#          args: --timeout 8m

  dockerize:
    runs-on: ubuntu-latest
    name: Dockerize - Stage
    needs: build

    outputs:
      image: ${{ steps.output-image.outputs.image }}

    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts

      - name: change permission
        run: chmod a+x main

      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east4-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.DEV_DEPLOY_KEY }}

      - name: Build and Push Docker Image to GAR
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          file: ./Dockerfile
          tags: us-east4-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}
      - id: output-image
        run: echo "image=`echo us-east4-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}`" >> "$GITHUB_OUTPUT"

  deployment:
    runs-on: ubuntu-latest
    needs: dockerize
    name: Deploy to Stage
    env:
      image: ${{needs.dockerize.outputs.image}}

    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Verify
        run: ls -la

      - name: Directory
        run: pwd

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ env.CLUSTER_PROJECT }}
          service_account_key: ${{ secrets.DEV_DEPLOY_KEY }}
          export_default_credentials: true

      - name: Update Kubectl component
        run: gcloud --quiet components update kubectl

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }}  --region=us-central1 --project=${{ env.CLUSTER_PROJECT }}

      - name: Update Deployment Image
        run: kubectl set image deployment/${{ env.APP_NAME }} ${{ env.APP_NAME }}=${{ env.image }} --namespace ${{ env.NAMESPACE }}