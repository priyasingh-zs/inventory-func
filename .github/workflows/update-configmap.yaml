name: "Update configmap"
on:
  workflow_call:
    inputs:
      APP_NAME:
        description: 'name of configmap'
        required: true
        type: string
      NAMESPACE:
        description: 'namespace name'
        required: true
        type: string
      ENV_FILE_PATH:
        description: 'env file path'
        required: true
        type: string
      CLUSTER_PROJECT:
        description: 'cluster project'
        type: string
        required: true
      CLUSTER_NAME:
        description: 'cluster name'
        type: string
        required: true
      REACT_APP:
        description: 'for react service'
        type: boolean
        required: false
        default: false
    secrets:
      DEPLOY_KEY:
        description: 'required input'
        required: true

jobs:
  check_modified_file:
    runs-on: ubuntu-latest
    outputs:
      modified_file: ${{ steps.check_files.outputs.modified_files }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      # Check if .stage.env or .prod.env is in the modified files
      - name: Modified files
        id: check_files
        run: |
          if [[ $(git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E '\.(prod|stage)\.env') ]]; then
             echo "modified_files=true" >> "$GITHUB_OUTPUT"
          else
            echo "modified_files=false" >> "$GITHUB_OUTPUT"
          fi

      - name: print modified_files
        run: echo ${{ steps.check_files.outputs.modified_files }}

  update_configmap:
    name: Update Configmap
    needs: check_modified_file
    runs-on: ubuntu-latest
    if: ${{ needs.check_modified_file.outputs.modified_file == 'true'}}
    container:
      image: ghcr.io/zopsmart/gha-images:deployments-0.1.3
      options: --rm

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: print modified_files
        run: echo ${{ needs.check_modified_file.outputs.modified_file }}

      - name: Authorize to GCP service account
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEPLOY_KEY }}

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials ${{ inputs.CLUSTER_NAME }} --region=us-central1 --project=${{ inputs.CLUSTER_PROJECT }}

#      - name: List ConfigMaps in Kubernetes
#        run: |
#          kubectl get configmaps -n ${{ inputs.NAMESPACE }} -o=json > configmaps.json
#
#      - name: list configmaps
#        run: cat configmaps.json
#
#      - name: Check Specific ConfigMap
#        id: check-configmap
#        run: |
#          # Parse configmaps.json to find specific ConfigMap
#          if grep -q ${{ inputs.APP_NAME }} configmaps.json; then
#            echo "check_configmap=true" >> "$GITHUB_OUTPUT"
#          else
#            echo "check_configmap=false" >> "$GITHUB_OUTPUT"
#          fi
#
#      - name: print check_configmap
#        run: echo ${{ steps.check-configmap.outputs.check_configmap }}

      - name: print react_app
        run: echo ${{ inputs.REACT_APP }}

      - name: Read ENV Files
        if: ${{ inputs.REACT_APP == 'false' }}
        id: read-env
        run: |
          CONFIG_MAP_NAME=${{ inputs.APP_NAME }}
          ENV_FILE_PATH=${{ inputs.ENV_FILE_PATH }}
          
          # Create an associative array to store key-value pairs
          declare -A envArray
          
          # Read each line in .env and extract key-value pairs
          while IFS= read -r line || [[ -n "$line" ]]; do
            if [ -z "$line" ] || [ "${line:0:1}" == "#" ]; then
              continue
            fi
            key=$(echo "$line" | cut -d '=' -f 1)
            value=$(echo "$line" | cut -d '=' -f 2-)
            envArray["$key"]=$value
          done < "$ENV_FILE_PATH"
          
          # Handle the case when the last line doesn't end with a newline character
          if [[ -n "$line" ]]; then
            key=$(echo "$line" | cut -d '=' -f 1)
            value=$(echo "$line" | cut -d '=' -f 2-)
            envArray["$key"]=$value
          fi
          
          # Read the .env file and create a ConfigMap YAML dynamically
          echo "apiVersion: v1" > $CONFIG_MAP_NAME.yaml
          echo "kind: ConfigMap" >> $CONFIG_MAP_NAME.yaml
          echo "metadata:" >> $CONFIG_MAP_NAME.yaml
          echo "  name: $CONFIG_MAP_NAME" >> $CONFIG_MAP_NAME.yaml
          echo "data:" >> $CONFIG_MAP_NAME.yaml
          for key in "${!envArray[@]}"; do
            echo "  $key: ${envArray[$key]}" >> $CONFIG_MAP_NAME.yaml
          done
        shell: bash

      - name: Configmap for React services
        if: ${{ inputs.REACT_APP }}
        id: react-service-configmap
        run: |
          CONFIG_MAP_NAME=${{ inputs.APP_NAME }}
          ENV_FILE_PATH=${{ inputs.ENV_FILE_PATH }}
          
          # Create an associative array to store key-value pairs
          declare -A envArray
          
          # Read each line in .env and extract key-value pairs
          while IFS= read -r line || [[ -n "$line" ]]; do
            if [ -z "$line" ] || [ "${line:0:1}" == "#" ]; then
              continue
            fi
            key=$(echo "$line" | cut -d '=' -f 1)
            value=$(echo "$line" | cut -d '=' -f 2-)
            envArray["$key"]=$value
          done < "$ENV_FILE_PATH"
          
          # Handle the case when the last line doesn't end with a newline character
          if [[ -n "$line" ]]; then
            key=$(echo "$line" | cut -d '=' -f 1)
            value=$(echo "$line" | cut -d '=' -f 2-)
            envArray["$key"]=$value
          fi
          
          # Read the .env file and create a ConfigMap YAML dynamically
          echo "apiVersion: v1" > $CONFIG_MAP_NAME.yaml
          echo "kind: ConfigMap" >> $CONFIG_MAP_NAME.yaml
          echo "metadata:" >> $CONFIG_MAP_NAME.yaml
          echo "  name: $CONFIG_MAP_NAME" >> $CONFIG_MAP_NAME.yaml
          echo "data:" >> $CONFIG_MAP_NAME.yaml
          echo "  environment.js: |" >> $CONFIG_MAP_NAME.yaml
          echo "    window.env = {" >> $CONFIG_MAP_NAME.yaml
          for key in "${!envArray[@]}"; do
            echo "      $key: ${envArray[$key]}," >> $CONFIG_MAP_NAME.yaml
          done
          echo "    }" >> $CONFIG_MAP_NAME.yaml
        shell: bash

      - name: Update configmap
        run: kubectl apply --force -f ${{ inputs.APP_NAME }}.yaml -n ${{ inputs.NAMESPACE }}