name: "Update configmap"
on:
  workflow_call:
    inputs:
      APP_NAME:
        description: 'name of configmap'
        required: true
        type: string
      ENV_FILE_NAME:
        description: 'env file name'
        required: false
        type: string
        default: '1.20'

    outputs:
      modified_file:
        description: "env file modified or not"
        value: ${{ jobs.check_modified_file.outputs.run_job }}
    secrets:
      DEPLOY_KEY:
        description: 'required input'
        required: true

jobs:
  check_modified_file:
    runs-on: ubuntu-latest
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          run_job=true

          while IFS= read -r file
          do
            echo $file
            if [[ "$file" != "configs/"* ]]; then
              echo "This modified file is not under the 'configs' folder."
              run_job=false
            fi
          done < files.txt

          # Set the output based on the condition after checking all files
          if [ "$run_job" = false ]; then
            echo "::set-output name=run_job::false"
          else
            echo "::set-output name=run_job::true"
          fi
  

  update_configmap:
    runs-on: ubuntu-latest
    needs: check_modified_file
    if: ${{ needs.check_modified_file.outputs.modified_file }}
    container:
      image: ghcr.io/zopsmart/gha-images:deployments-0.1.3
      options: --rm
    name: Update Configmap

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ inputs.CLUSTER_PROJECT }}
          service_account_key: ${{ secrets.GAR_KEY }}
          export_default_credentials: true

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials ${{ inputs.CLUSTER_NAME }} --region=us-central1 --project=${{ inputs.CLUSTER_PROJECT }}

      - name: Read .stage.env File
        id: read-env
        run: |
          CONFIG_MAP_NAME=order-data
          ENV_FILE_PATH=./.stage.env

          # Create an associative array to store key-value pairs
          declare -A envArray

          # Read each line in .env and extract key-value pairs
          while IFS= read -r line; do
            key=$(echo "$line" | cut -d '=' -f 1)
            value=$(echo "$line" | cut -d '=' -f 2-)
            envArray["$key"]=$value
          done < "$ENV_FILE_PATH"

          # Read the .env file and create a ConfigMap YAML dynamically
          echo "apiVersion: v1" > $CONFIG_MAP_NAME.yaml
          echo "kind: ConfigMap" >> $CONFIG_MAP_NAME.yaml
          echo "metadata:" >> $CONFIG_MAP_NAME.yaml
          echo "  name: $CONFIG_MAP_NAME" >> $CONFIG_MAP_NAME.yaml
          echo "data:" >> $CONFIG_MAP_NAME.yaml
          for key in "${!envArray[@]}"; do
            echo "  $key: ${envArray[$key]}" >> $CONFIG_MAP_NAME.yaml
          done
        shell: bash

      - name: Echo YAML file content
        run: cat order-data.yaml

      - name: Update configmap
        run: kubectl apply --force -f order-data.yaml -n test