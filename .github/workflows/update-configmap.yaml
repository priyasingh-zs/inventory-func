name: "Update configmap"
on:
  workflow_call:
    inputs:
      APP_NAME:
        description: 'name of configmap'
        required: true
        type: string
      NAMESPACE:
        description: 'namespace name'
        required: true
        type: string
      ENV_FILE_PATH:
        description: 'env file path'
        required: true
        type: string
      CLUSTER_PROJECT:
        description: 'cluster project'
        type: string
        required: true
      CLUSTER_NAME:
        description: 'cluster name'
        type: string
        required: true
    outputs:
      env_modified_file:
        description: "only env files are modified or not"
        value: ${{ jobs.check_modified_file.outputs.env_modified_file }}
      modified_file:
        description: "env with other files are modified or not"
        value: ${{ jobs.check_modified_file.outputs.modified_file }}
    secrets:
      DEPLOY_KEY:
        description: 'required input'
        required: true

jobs:
  check_modified_file:
    runs-on: ubuntu-latest
    outputs:
      env_modified_file: ${{ steps.check_files.outputs.env_modified_files }}
      modified_file: ${{ steps.check_files.outputs.modified_files }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Get modified files
        run: |
          modified_files=$(git diff --name-only HEAD^ HEAD)
          echo "Modified files: $modified_files"

      # Check if .stage.env or .prod.env is in the modified files
      - id: check_files
        run: |
          modified_files=$(git diff --name-only HEAD^ HEAD)
          if [[ $(echo "$modified_files" | grep -E '(\.(prod|stage)\.env$)') ]]; then
            echo "env_modified_files=true" >> "$GITHUB_OUTPUT"
          else
            echo "env_modified_files=false" >> "$GITHUB_OUTPUT"
          fi
          
          if [[ -n $(echo "$modified_files" | grep -Ev '(\.(prod|stage)\.env$)') ]]; then
            echo "modified_files=true" >> "$GITHUB_OUTPUT"
          else
            echo "modified_files=false" >> "$GITHUB_OUTPUT"
          fi

      - name: print modified_files
        run: |
          echo "${{ steps.check_files.outputs.env_modified_files }}"
          echo "${{ steps.check_files.outputs.modified_files }}"

  update_configmap:
    runs-on: ubuntu-latest
    needs: check_modified_file
    if: ${{ needs.check_modified_file.outputs.env_modified_file == 'true' }}
    container:
      image: ghcr.io/zopsmart/gha-images:deployments-0.1.3
      options: --rm
    name: Update Configmap

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authorize to GCP service account
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEPLOY_KEY }}

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials ${{ inputs.CLUSTER_NAME }} --region=us-central1 --project=${{ inputs.CLUSTER_PROJECT }}

      - name: Read ENV Files
        id: read-env
        run: |
          CONFIG_MAP_NAME=${{ inputs.APP_NAME }}
          ENV_FILE_PATH=${{ inputs.ENV_FILE_PATH }}

          # Create an associative array to store key-value pairs
          declare -A envArray

          # Read each line in .env and extract key-value pairs
          while IFS= read -r line || [[ -n "$line" ]]; do
            if [ -z "$line" ] || [ "${line:0:1}" == "#" ]; then
              continue
            fi
            key=$(echo "$line" | cut -d '=' -f 1)
            value=$(echo "$line" | cut -d '=' -f 2-)
            envArray["$key"]=$value
          done < "$ENV_FILE_PATH"

          # Handle the case when the last line doesn't end with a newline character
          if [[ -n "$line" ]]; then
            key=$(echo "$line" | cut -d '=' -f 1)
            value=$(echo "$line" | cut -d '=' -f 2-)
            envArray["$key"]=$value
          fi

          # Read the .env file and create a ConfigMap YAML dynamically
          echo "apiVersion: v1" > $CONFIG_MAP_NAME.yaml
          echo "kind: ConfigMap" >> $CONFIG_MAP_NAME.yaml
          echo "metadata:" >> $CONFIG_MAP_NAME.yaml
          echo "  name: $CONFIG_MAP_NAME" >> $CONFIG_MAP_NAME.yaml
          echo "data:" >> $CONFIG_MAP_NAME.yaml
          for key in "${!envArray[@]}"; do
            echo "  $key: ${envArray[$key]}" >> $CONFIG_MAP_NAME.yaml
          done
        shell: bash

      - name: Update configmap
        run: kubectl apply --force -f ${{ inputs.APP_NAME }}.yaml -n ${{ inputs.NAMESPACE }}
