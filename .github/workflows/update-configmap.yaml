name: "Update configmap"
on:
  workflow_call:
    inputs:
      APP_NAME:
        description: 'name of configmap'
        required: true
        type: string
      NAMESPACE:
        description: 'namespace name'
        required: true
        type: string
      ENV_FILE_NAME:
        description: 'env file name'
        required: true
        type: string
      CLUSTER_PROJECT:
        description: 'cluster project'
        type: string
        required: true
      CLUSTER_NAME:
        description: 'cluster name'
        type: string
        required: true
    secrets:
      DEPLOY_KEY:
        description: 'required input'
        required: true

jobs:
  check_modified_file:
    runs-on: ubuntu-latest
    outputs:
      modified_file: ${{ steps.check_files.outputs.modified_files }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      # List of files that are added or modified in the commit
      - id: files
        uses: masesgroup/retrieve-changed-files@v2
      - run: |
          for added_modified_file in ${{ steps.files.outputs.all }}; do
            echo ${added_modified_file}
          done

      - id: sort
        run: |
          readarray -td $'\0' sorted < <(
                    for i in ${{ steps.files.outputs.all }};
                    do     printf '%s %s\0' "${#i}" "$i";
                    done |
                            sort -bz -k1,1n -k2|
                            cut -zd " " -f2-
                    )
          echo "files=`echo ${sorted[@]}`" >> "$GITHUB_OUTPUT"

        # Check if .stage.env or .prod.env is in the modified files
      - id: check_files
        run: |
          if echo "${sorted[@]}" | grep -q -e '\.stage\.env\|\.prod\.env'; then
            echo "::set-output name=modified_files::true"
          else
            echo "::set-output name=modified_files::false"
          fi

      - name: print var modified_files
        run: echo modified_files

  update_configmap:
    runs-on: ubuntu-latest
    needs: check_modified_file
    if: ${{ needs.check_modified_file.outputs.modified_file }}
    container:
      image: ghcr.io/zopsmart/gha-images:deployments-0.1.3
      options: --rm
    name: Update Configmap

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: print var modified_files
        run: echo ${{ needs.check_modified_file.outputs.modified_file }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ inputs.CLUSTER_PROJECT }}
          service_account_key: ${{ secrets.DEPLOY_KEY }}
          export_default_credentials: true

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials ${{ inputs.CLUSTER_NAME }} --region=us-central1 --project=${{ inputs.CLUSTER_PROJECT }}

      - name: Read .stage.env File
        id: read-env
        run: |
          CONFIG_MAP_NAME=${{ inputs.APP_NAME }}
          ENV_FILE_PATH=${{ inputs.ENV_FILE_NAME }}

          # Create an associative array to store key-value pairs
          declare -A envArray

          # Read each line in .env and extract key-value pairs
          while IFS= read -r line; do
            key=$(echo "$line" | cut -d '=' -f 1)
            value=$(echo "$line" | cut -d '=' -f 2-)
            envArray["$key"]=$value
          done < "$ENV_FILE_PATH"

          # Read the .env file and create a ConfigMap YAML dynamically
          echo "apiVersion: v1" > $CONFIG_MAP_NAME.yaml
          echo "kind: ConfigMap" >> $CONFIG_MAP_NAME.yaml
          echo "metadata:" >> $CONFIG_MAP_NAME.yaml
          echo "  name: $CONFIG_MAP_NAME" >> $CONFIG_MAP_NAME.yaml
          echo "data:" >> $CONFIG_MAP_NAME.yaml
          for key in "${!envArray[@]}"; do
            echo "  $key: ${envArray[$key]}" >> $CONFIG_MAP_NAME.yaml
          done
        shell: bash

      - name: Echo YAML file content
        run: cat ${{ inputs.APP_NAME }}.yaml

      - name: Update configmap
        run: kubectl apply --force -f ${{ inputs.APP_NAME }}.yaml -n ${{ inputs.NAMESPACE }}