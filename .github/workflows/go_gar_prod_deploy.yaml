name: "prod deploy"
on:
  workflow_call:
    inputs:
      APP_NAME:
        type: string
        required: true
      IMAGE_REGISTRY:
        type: string
        required: true
      GAR_PROJECT:
        type: string
        required: true
      GAR_REGISTRY:
        type: string
        required: true
      CLUSTER_PROJECT:
        type: string
        required: true
      CLUSTER_NAME:
        type: string
        required: true
      NAMESPACE:
        type: string
        required: true
      HELM_VALUES_PATH:
        type: string
        required: true
      ENV_FILE_PATH:
        description: 'env file path'
        required: false
        type: string
        default: "./configs/.prod.env"

    secrets:
      PAT:
        description: 'required input'
        required: true
      GAR_KEY:
        description: 'required input'
        required: true



jobs:
  check-tag:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v')}}
    outputs:
      tag_exists: ${{ steps.tag-check.outputs.tag_exists }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authorize to GCP service account
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GAR_KEY }}

      - name: Check if tag exists
        id: tag-check
        run: |
          if gcloud artifacts docker images list ${{ inputs.IMAGE_REGISTRY }}/${{ inputs.GAR_PROJECT }}/${{ inputs.GAR_REGISTRY }} --include-tags | grep -q "${{ github.sha }}"; then
              echo "tag_exists=true" >> "$GITHUB_OUTPUT"
          else
              echo "tag_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Print commit has value
        run: |
          echo "${{ github.sha }}"

      - name: Print tag_exists value
        run: |
          echo "${{ steps.tag-check.outputs.tag_exists }}"

  dockerize:
    runs-on: ubuntu-latest
    name: 🐳 Dockerize
    needs: check-tag
    if: ${{ needs.check-tag.outputs.tag_exists == 'true' }}

    outputs:
      image: ${{ steps.output-image.outputs.image }}
    steps:
      - name: Extract Release Tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Set up Docker CLI
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.IMAGE_REGISTRY }}
          username: _json_key
          password: ${{ secrets.GAR_KEY }}
      - name: change tag and push image
        run: |
          docker pull ${{ inputs.IMAGE_REGISTRY }}/${{ inputs.GAR_PROJECT }}/${{ inputs.GAR_REGISTRY }}/${{ inputs.APP_NAME }}:${{ github.sha }}
          docker tag ${{ inputs.IMAGE_REGISTRY }}/${{ inputs.GAR_PROJECT }}/${{ inputs.GAR_REGISTRY }}/${{ inputs.APP_NAME }}:${{ github.sha }}  ${{ inputs.IMAGE_REGISTRY }}/${{ inputs.GAR_PROJECT }}/${{ inputs.GAR_REGISTRY }}/${{ inputs.APP_NAME }}:${{ env.RELEASE_VERSION }}
          docker push ${{ inputs.IMAGE_REGISTRY }}/${{ inputs.GAR_PROJECT }}/${{ inputs.GAR_REGISTRY }}/${{ inputs.APP_NAME }}:${{ env.RELEASE_VERSION }}
        continue-on-error: true
      - id: output-image
        run: echo "image=`echo ${{ inputs.IMAGE_REGISTRY }}/${{ inputs.GAR_PROJECT }}/${{ inputs.GAR_REGISTRY }}/${{ inputs.APP_NAME }}:${{ env.RELEASE_VERSION }}`" >> "$GITHUB_OUTPUT"

  update_configmap:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    uses: chakra-test/inv-func/.github/workflows/update-configmap.yaml@main
    with:
      APP_NAME: ${{ inputs.APP_NAME }}
      ENV_FILE_PATH: ${{ inputs.ENV_FILE_PATH }}
      CLUSTER_PROJECT: ${{ inputs.CLUSTER_PROJECT }}
      CLUSTER_NAME: ${{ inputs.CLUSTER_NAME }}
      NAMESPACE: ${{ inputs.NAMESPACE }}
    secrets:
      DEPLOY_KEY: ${{ secrets.GAR_KEY }}

  prod_deployment:
    runs-on: ubuntu-latest
    needs: dockerize
    container:
      image: ghcr.io/zopsmart/gha-images:deployments-0.1.3
      options: --rm
    name: 🚀 Deploy to Prod
    env:
      image: ${{needs.dockerize.outputs.image}}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Extract Release Tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Setup Helm Chart
        run: git clone https://${{ secrets.PAT }}@github.com/zopsmart/helm.git

      - name: Add Helm Repo
        run: |
          helm repo add helm \
            --username "${{ github.actor }}" \
            --password "${{ secrets.PAT }}" \
            "https://raw.githubusercontent.com/zopsmart/helm/main/charts"

      - name: Authorize to GCP service account
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GAR_KEY }}

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials ${{ inputs.CLUSTER_NAME }} --region=us-central1 --project=${{ inputs.CLUSTER_PROJECT }}

      - name: Update Deployment Image
        run: helm upgrade --install --set image=${{ env.image }} ${{ inputs.APP_NAME }} helm/service -f ${{ inputs.HELM_VALUES_PATH }} -n ${{ inputs.NAMESPACE }} --version v0.1.4

      - name: Set App Version
        run: kubectl set env deployment/${{ inputs.APP_NAME }} APP_VERSION=${{ env.RELEASE_VERSION }} -n ${{ inputs.NAMESPACE }}