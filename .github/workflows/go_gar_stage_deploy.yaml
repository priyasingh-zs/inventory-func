name: "stage deploy"
on:
  workflow_call:
    inputs:
      APP_NAME:
        type: string
        required: true
      IMAGE_REGISTRY:
        type: string
        required: true
      GAR_PROJECT:
        type: string
        required: true
      GAR_REGISTRY:
        type: string
        required: true
      CLUSTER_PROJECT:
        type: string
        required: true
      CLUSTER_NAME:
        type: string
        required: true
      NAMESPACE:
        type: string
        required: true
      HELM_VALUES_PATH:
        type: string
        required: true
      DOCKER_FILE_PATH:
        description: 'path of docker file'
        required: true
        type: string
      GO_VERSION:
        description: 'go version'
        required: false
        type: string
        default: '1.20'

      EXTRA_DEPENDENCIES:
        description: 'enable step to install extra dependencies'
        required: false
        type: boolean
        default: false

      DEPENDENCIES_COMMAND:
        description: 'commands to install extra dependencies'
        required: false
        type: string

      BUILD_COMMAND:
        description: 'go build command'
        required: true
        type: string

      ARTIFACT_PATH:
        description: "path used for build with respect to main.go file"
        required: true
        type: string

      SHA:
        type: string
        required: true

      BUILD_ARGUMENTS:
        description: 'build arguments for DockerFile'
        required: false
        type: string

    secrets:
      PAT:
        description: 'required input'
        required: true
      GAR_KEY:
        description: 'required input'
        required: true



jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '${{ inputs.GO_VERSION }}'

      - name: Get dependencies
        run: |
          git config --global url."https://${{ secrets.PAT }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          git config --global http.sslVerify false
          go mod download

      - name: Extra dependencies
        if: ${{ inputs.EXTRA_DEPENDENCIES }}
        run: |
          ${{ inputs.DEPENDENCIES_COMMAND }}

      - name: Make Directory
        run: mkdir build

#      - name: Build
#        run: |
#          cd ${{ inputs.DOCKER_FILE_PATH }}
#          ls
#          pwd
#          ${{ inputs.BUILD_COMMAND }}
#
#      - name: Upload Artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ inputs.APP_NAME }}
#          path: ${{ inputs.DOCKER_FILE_PATH }}/${{ inputs.ARTIFACT_PATH }}

  dockerize:
    runs-on: ubuntu-latest
    needs: [ build ]
    outputs:
      image: ${{ steps.output-image.outputs.image }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.APP_NAME }}

#      - name: Login to GAR
#        uses: docker/login-action@v2
#        with:
#          registry: ${{ inputs.IMAGE_REGISTRY }}
#          username: _json_key
#          password: ${{ secrets.GAR_KEY }}
#
#
#      - name: Build and Push Docker Image to gar
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          context: .
#          file: ${{ inputs.DOCKER_FILE_PATH }}/Dockerfile
#          tags:  ${{ inputs.IMAGE_REGISTRY }}/${{ inputs.GAR_PROJECT }}/${{ inputs.GAR_REGISTRY }}/${{ inputs.APP_NAME }}:${{ inputs.SHA }}
#          build-args: |
#            ${{ inputs.BUILD_ARGUMENTS }}
#      - id: output-image
#        run: echo "image=`echo  ${{ inputs.IMAGE_REGISTRY }}/${{ inputs.GAR_PROJECT }}/${{ inputs.GAR_REGISTRY }}/${{ inputs.APP_NAME }}:${{ inputs.SHA }}`" >> "$GITHUB_OUTPUT"

  stage_deployment:
    runs-on: ubuntu-latest
    needs: dockerize
    container:
      image: ghcr.io/zopsmart/gha-images:deployments-0.1.3
      options: --rm
    name: ðŸš€ Deploy Stage
    env:
      image: ${{needs.dockerize.outputs.image}}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

#      - name: Setup Helm Chart
#        run: git clone -b test-env-vars https://${{ secrets.PAT }}@github.com/zopsmart/helm.git
#
#      - name: Setup Cloud SDK
#        uses: google-github-actions/setup-gcloud@v0
#        with:
#          project_id: ${{ inputs.CLUSTER_PROJECT }}
#          service_account_key: ${{ secrets.GAR_KEY }}
#          export_default_credentials: true
#
#      - name: Set GCloud Project and Fetch Cluster Credentials
#        run: gcloud container clusters get-credentials ${{ inputs.CLUSTER_NAME }} --region=us-central1 --project=${{ inputs.CLUSTER_PROJECT }}

      - name: Scan .env and create ConfigMap
        run: |
          CONFIG_MAP_NAME=my-config-map
          ENV_FILE_PATH=./../env
          
          # Read the .env file and create a ConfigMap YAML dynamically
          echo "apiVersion: v1" > configmap.yaml
          echo "kind: ConfigMap" >> configmap.yaml
          echo "metadata:" >> configmap.yaml
          echo "  name: $CONFIG_MAP_NAME" >> configmap.yaml
          echo "data:" >> configmap.yaml
          
          # Read each line in .env and extract key-value pairs
          while IFS= read -r line; do
            key=$(echo "$line" | cut -d '=' -f 1)
            value=$(echo "$line" | cut -d '=' -f 2-)
            echo "  $key: $(echo $value | sed 's/"/\\"/g')" >> configmap.yaml
          done < "$ENV_FILE_PATH"
          
          # Apply the ConfigMap to the cluster
          kubectl apply -f configmap.yaml

#      - name: Update Deployment Image
#        run: helm upgrade --install --set image=${{ env.image }} ${{ inputs.APP_NAME }} ./helm/service/ -f ${{ inputs.HELM_VALUES_PATH }} -n ${{ inputs.NAMESPACE }}