name: "stage deploy"
on:
  workflow_call:
    inputs:
      APP_NAME:
        type: string
        required: true
      IMAGE_REGISTRY:
        type: string
        required: true
      GAR_PROJECT:
        type: string
        required: true
      GAR_REGISTRY:
        type: string
        required: true
      CLUSTER_PROJECT:
        type: string
        required: true
      CLUSTER_NAME:
        type: string
        required: true
      NAMESPACE:
        type: string
        required: true
      HELM_VALUES_PATH:
        type: string
        required: true
      DOCKER_FILE_PATH:
        description: 'path of docker file'
        required: true
        type: string
      GO_VERSION:
        description: 'go version'
        required: false
        type: string
        default: '1.20'

      EXTRA_DEPENDENCIES:
        description: 'enable step to install extra dependencies'
        required: false
        type: boolean
        default: false

      DEPENDENCIES_COMMAND:
        description: 'commands to install extra dependencies'
        required: false
        type: string

      BUILD_COMMAND:
        description: 'go build command'
        required: true
        type: string

      ARTIFACT_PATH:
        description: "path used for build with respect to main.go file"
        required: true
        type: string

      SHA:
        type: string
        required: true

      BUILD_ARGUMENTS:
        description: 'build arguments for DockerFile'
        required: false
        type: string

    secrets:
      PAT:
        description: 'required input'
        required: true
      GAR_KEY:
        description: 'required input'
        required: true



jobs:
  update_configmap:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/zopsmart/gha-images:deployments-0.1.3
      options: --rm
    name: Update Configmap

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ inputs.CLUSTER_PROJECT }}
          service_account_key: ${{ secrets.GAR_KEY }}
          export_default_credentials: true

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials ${{ inputs.CLUSTER_NAME }} --region=us-central1 --project=${{ inputs.CLUSTER_PROJECT }}

      - name: Read .stage.env File
        id: read-env
        run: |
          CONFIG_MAP_NAME=order-data-config-map
          ENV_FILE_PATH=./.stage.env
          
          # Create an associative array to store key-value pairs
          declare -A envArray
          
          # Read each line in .env and extract key-value pairs
          while IFS= read -r line; do
            key=$(echo "$line" | cut -d '=' -f 1)
            value=$(echo "$line" | cut -d '=' -f 2-)
            envArray["$key"]=$value
          done < "$ENV_FILE_PATH"
          
          # Print the extracted key-value pairs
          for key in "${!envArray[@]}"; do
            echo "Key: $key, Value: ${envArray[$key]}"
          done
          
          # Export key-value pairs as environment variables (optional)
          for key in "${!envArray[@]}"; do
            echo "$key=${envArray[$key]}" >> $GITHUB_ENV
          done
          
          # Read the .env file and create a ConfigMap YAML dynamically
          echo "apiVersion: v1" > order-data-config-map.yaml
          echo "kind: ConfigMap" >> order-data-config-map.yaml
          echo "metadata:" >> order-data-config-map.yaml
          echo "  name: $CONFIG_MAP_NAME" >> order-data-config-map.yaml
          echo "data: " >> order-data-config-map.yaml
          for key in "${!envArray[@]}"; do
            echo "$key:${envArray[$key]}" >> order-data-config-map.yaml
          done
        shell: bash

      - name: Echo YAML file content
        run: cat order-data-config-map.yaml

      - name: Update configmap
        run: kubectl apply -f order-data-config-map.yaml -n samp
